# .github/workflows/ci.yml
# Continuous Integration (CI) Workflow
name: ci
# This workflow will run whenever we push commits to the `main` branch, or
# whenever there's a pull request to the `main` branch. See:
# https://docs.github.com/en/actions/learn-github-actions/workflow-syntax-for-github-actions#on
on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
jobs:
  lint:
    # Give your job a name that will show up in the GitHub Actions web UI
    name: ESLint
    # We'll run this on a Linux (Ubuntu) VM, since we'll deploy on Linux too.
    runs-on: ubuntu-latest
    # We run these steps one after the other, and if any fail, we stop the process
    steps:
      # https://github.com/actions/checkout
      - name: Check out code
        uses: actions/checkout@v4
      # https://github.com/actions/setup-node
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          # Use node LTS https://github.com/actions/setup-node#supported-version-syntax
          node-version: 'lts/*'
          # Cache npm dependencies so they don't have to be downloaded next time - https://github.com/actions/setup-node#caching-packages-dependencies
          cache: 'npm'
      - name: Install node dependencies
        # Use `ci` vs. `install`, see https://docs.npmjs.com/cli/v8/commands/npm-ci
        run: npm ci
      - name: Run ESLint
        run: npm run lint

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'npm'
      - name: Install node dependencies and run Tests
        # There are two ways we could do this:
        #

        # 2. Use `install-ci-test` to do it in a single command, see https://docs.npmjs.com/cli/v8/commands/npm-install-ci-test
        # run: npm install-ci-test
        run: npm install-ci-test
  
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'npm'
      - name: Install node dependencies
        # NOTE: we need to install dev dependencies too vs. production only for hurl
        run: npm ci
        # Set up (MOCK) local AWS resources for integration tests
      - name: Make local-aws-setup.sh executable
        # Add execute permissions to local-aws-setup.sh
        run: chmod +x ./scripts/local-aws-setup.sh
      # Build and start the local AWS resources
      - name: Build Containers
        run: docker compose up -d
      - name: Setup Local AWS Resources
        run: ./scripts/local-aws-setup.sh
      - name: Run Hurl Tests
        run: npm run test:integration

  dockerfile-lint:
    name: 'Dockerfile Lint'
    runs-on: ubuntu-latest

    steps:
      - name: Check out Code
        uses: actions/checkout@v4
      - name: hadoling test
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile

  docker-build-push:
    name: 'Docker image build and Push to DockerHub'
    # This ensures the job only runs on pushes to main, not on pull requests
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    # Make this job run after the other jobs have succeeded
    needs: [lint, unit-tests, dockerfile-lint, integration-tests]

    runs-on: ubuntu-latest

    steps:
      - name: Check out Code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          # Directly reference secrets and GitHub context variables in the tags
          tags: ${{ secrets.DOCKERHUB_REPO }}:sha-${{ github.sha }}, ${{ secrets.DOCKERHUB_REPO }}:main, ${{ secrets.DOCKERHUB_REPO }}:latest
          # Pass the SHA as a build argument to the Dockerfile
          build-args: |
            COMMIT_SHA=sha-${{ github.sha }}
            BUILD_DATE=${{ github.event.repository.updated_at }}
